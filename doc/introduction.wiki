Vue3.0 vue-composition Api的使用
参考网站: 
  https://vue-composition-api-rfc.netlify.app/zh/api.html#watcheffect
  https://blog.csdn.net/FungLeo/article/details/106208437

  1. Composition API 设计初衷是什么？
    1>逻辑组合和复用
    2>类型推导: Vue3.0 最核心的点之一就是使用 TS 重构，以实现对 TS 丝滑般的支持。
    而基于函数 的 API 则天然对类型推导很友好。
    3>打包尺寸: 每个函数都可作为named ES export 被单独引入，对 tree-shaking 很友好；
    其次所有函数名和 setup 函数内部的变量都能被压缩，所以能有更好的压缩效率。
  
  2. setup
    答: setup()会取代vue2.x的data()函数，返回一个对象，暴露给模板，而且只在初始化的时候
      调用一次，因为值可以被跟踪。
      setup() 函数是 vue3 中统一的入口函数,所有生命周期函数定义都是需要定义在次函数下
      才生效，setup 函数中无法访问到 this，所有的组件参数都是通过，setup函数中包含
      props和context参数，props参数默认是响应式的
      
      写 vue 有一个痛苦的点就是很多的东西我想抽离成组件，但是一拆，就得有 data (), 
      methods 等等一堆。因此，有时候就偷懒，懒得拆了。

      现在好了，可以一个函数就是一个组件，多方便啊！

 
  3. Reactive (声明单一对象时使用): 取得一个对象并返回原始对象的响应数据处理

  4.  ref(声明基础数据类型变量时使用);内部值并返回一个响应性且可变的ref对象。
  ref对象具有.value指向内部值得单个属性。
  如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。

  5. reactive 和 ref的区别
   答: 1. 是为了适应不同的写法人群
       2. ref只能监听简单的数据,reactive可以监听所有数据
       答: ref这种写法简单，但也有弊端，经过尝试，我发现他只能监听一些如数字、字符串、
       布尔之类的简单数据而如果需要监听如上面代码一样的jsonArray我们在vue2种都会使用
       $set来进行变更，到了vue3我们终于可以愉快的使用reactive来实现了。
       3. 使用方式不一样
       4. reactive返回的是普通对象的响应式代理;但是ref返回的是一个ref对象
  
  6. computed
  答: 有时我们需要依赖于其他状态的状态——在 Vue 中，这是通过计算属性来处理的。要直接创建一个计算值，我们可以使用computed API
    一种是传入一个 getter 函数，返回一个默认不可手动修改的 ref 对象。
    另外一种是传入一个拥有 get 和 set 函数的对象，创建一个可手动修改的计算状态。
  
  注意: 当computed返回的是一个不可修改的ref的时候,不能给返回值赋值,不然会在浏览器中进行warn提醒
  
  7. readonly
  答: 传入一个对象（响应式或普通）或 ref，返回一个原始对象的只读代理。一个只读的代理
  是“深层的”，对象内部任何嵌套的属性也都是只读的。

8. watchEffect
  定义: 立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。
  作用: 
    1)停止侦听: 当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时， 
  侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。
  也可以显示的调用返回值停止侦听
    2)清除副作用: 有时副作用函数会执行一些异步的副作用, 这些响应需要在其失效时清除（即完成之前状态已改变了）
  。所以侦听副作用传入的函数可以接收一个 onInvalidate 函数作入参, 用来注册清理失效时的回调。
  当以下情况发生时，这个失效回调会被触发:
          副作用即将重新执行时
          侦听器被停止 (如果在 setup() 或 生命周期钩子函数中使用了 watchEffect, 则在卸载组件时)
    
    3)副作用刷新时机:Vue 的响应式系统会缓存副作用函数，并异步地刷新它们，这样可以避免同
  一个 tick 中多个状态改变导致的不必要的重复调用。在核心的具体实现中, 组件的更新函数
  也是一个被侦听的副作用。当一个用户定义的副作用函数进入队列时, 会在所有的组件更新后执行

  注意: 请注意，初始化运行是在组件 mounted 之前执行的。因此，如果你希望在编写副作用函数
  时访问 DOM（或模板 ref），请在 onMounted 钩子中进行：
  onMounted(() => {
    watchEffect(() => {
      // 在这里可以访问到 DOM 或者 template refs
    })
  })
  如果副作用需要同步或在组件更新之前重新运行，我们可以传递一个拥有 flush 属性的对象作为
  选项（默认为 'post'）

9. watch
定义: watch API 完全等效于 2.x this.$watch （以及 watch 中相应的选项）。watch 需要
侦听特定的数据源，并在回调函数中执行副作用。默认情况是懒执行的，也就是说仅在侦听的源变更时才执行回调。

区别: 对比 watchEffect，watch 允许我们：
  1) 懒执行副作用(watchEffect初始化的时候要执行一次,但是watch只有在数据源变化的时候才执行);
  2) 更明确哪些状态的改变会触发侦听器重新运行副作用；
  3) 访问侦听状态变化前后的值。
  4) 对于watch来说,进行侦听的时候,要赋值监听变化的东西,例如以下,
      watc(()=>{
        console.log('watchEffect',count.value)
      },  // 浏览器会报warn

       watchEffect(()=>{
        console.log('watchEffect',count.value)
      }, // 允许

作用: 
   1.侦听单个数据源
   侦听器的数据源可以是一个拥有返回值的 getter 函数，也可以是 ref
   // 侦听一个 getter
    const state = reactive({ count: 0 })
    watch(
      () => state.count,
      (count, prevCount) => {
        /* ... */
      }
    )

    // 直接侦听一个 ref
    const count = ref(0)
    watch(count, (count, prevCount) => {
      /* ... */
    })

    2 侦听多个数据源
    watch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {
      /* ... */
    })

    3 与watchEffect共享的行为
    watch 和 watchEffect 在停止侦听, 清除副作用 (相应地 onInvalidate 会作为回调的
    第三个参数传入)，副作用刷新时机 和 侦听器调试 等方面行为一致.

10. 依赖注入
定义: provide 和 inject 提供依赖注入，功能类似 2.x 的 provide/inject。两者都只能在
当前活动组件实例的 setup() 中调用。
使用:
  import { provide, inject } from 'vue'

  const ThemeSymbol = Symbol()

  const Ancestor = {
    setup() {
      provide(ThemeSymbol, 'dark')
    },
  }

  const Descendent = {
    setup() {
      const theme = inject(ThemeSymbol, 'light' /* optional default value */)
      return {
        theme,
      }
    },
  }
inject 接受一个可选的的默认值作为第二个参数。如果未提供默认值，并且在 provide 上下文中
未找到该属性，则 inject 返回 undefined。

注入的相应性:
  可以使用 ref 来保证 provided 和 injected 之间值的响应：

  // 提供者：
  const themeRef = ref('dark')
  provide(ThemeSymbol, themeRef)

  // 使用者：
  const theme = inject(ThemeSymbol, ref('light'))
  watchEffect(() => {
    console.log(`theme set to: ${theme.value}`)
  })
如果注入一个响应式对象，则它的状态变化也可以被侦听。

11 模板Refs( 组件实例获取)
定义: 为了获得对模板内元素或组件实例的引用，我们可以像往常一样在 setup() 中声明一个 ref 并返回它

12. unref: 如果参数是一个 ref 则返回它的 value，否则返回参数本身。
它是 val = isRef(val) ? val.value : val 的语法糖。

13. toRef: 可以用来为一个 reactive 对象的属性创建一个 ref。这个 ref 可以被传递并且能够保持响应性。
用途: 当您要将一个 prop 中的属性作为 ref 传给组合逻辑函数时，toRef 就派上了用场：
 

14. toRefs: 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref ，
和响应式对象 property 一一对应。
    const state = reactive({
      foo: 1,
      bar: 2,
    })

    const stateAsRefs = toRefs(state)
    /*
    stateAsRefs 的类型如下:

    {
      foo: Ref<number>,
      bar: Ref<number>
    }
    */

    // ref 对象 与 原属性的引用是 "链接" 上的
    state.foo++
    console.log(stateAsRefs.foo) // 2

    stateAsRefs.foo.value++
    console.log(state.foo) // 3
当想要从一个组合逻辑函数中返回响应式对象时，用 toRefs 是很有效的，该 API 让消费组件可以 
解构 / 扩展（使用 ... 操作符）返回的对象，并不会丢失响应性：
    function useFeatureX() {
      const state = reactive({
        foo: 1,
        bar: 2,
      })

      // 对 state 的逻辑操作

      // 返回时将属性都转为 ref
      return toRefs(state)
    }

    export default {
      setup() {
        // 可以解构，不会丢失响应性
        const { foo, bar } = useFeatureX()

        return {
          foo,
          bar,
        }
      },
    }

15. isRef: 检查值是否为一个ref对象
16. isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理
17. isReactive: 检查一个对象是否有reactive创建的相应式代理
如果这个代理是由readonly创建的,但是又被reactive创建的另一个代理包裹了一层,那么统一也会返回true
18. IsReadonly: 检查一个对象是否是由 readonly 创建的只读代理。

19. customRef: customRef 用于自定义一个 ref，可以显式地控制依赖追踪和触发响应，
接受一个工厂函数，两个参数分别是用于追踪的 track 与用于触发响应的 trigger，
并返回一个一个带有 get 和 set 属性的对象
使用: 使用自定义ref实现带防抖功能 v-model:
    <input v-model="text" />

    function useDebouncedRef(value, delay = 200) {
      let timeout
      return customRef((track, trigger) => {
        return {
          get() {
            track()
            return value
          },
          set(newValue) {
            clearTimeout(timeout)
            timeout = setTimeout(() => {
              value = newValue
              trigger()
            }, delay)
          },
        }
      })
    }

    export default {
      setup() {
        return {
          text: useDebouncedRef('hello'),
        }
      },
    }

20 markRaw: 显式标记一个对象为“永远不会转为响应式代理”，函数返回这个对象本身。
使用: 
    const foo = markRaw({})
    console.log(isReactive(reactive(foo))) // false

    // 如果被 markRaw 标记了，即使在响应式对象中作属性，也依然不是响应式的
    const bar = reactive({ foo })
    console.log(isReactive(bar.foo)) // false
这些 API 被认为是高级的，是因为这种特性仅停留在根级别，所以如果你将一个嵌套的，没有 
markRaw 的对象设置为 reactive 对象的属性，在重新访问时，你又会得到一个 Proxy 的版本，
在使用中最终会导致标识混淆的严重问题：执行某个操作同时依赖于某个对象的原始版本和代理版本。

const foo = markRaw({
  nested: {},
})

const bar = reactive({
  // 尽管 `foo` 己经被标记为 raw 了, 但 foo.nested 并没有
  nested: foo.nested,
})

console.log(foo.nested === bar.nested) // false
标识混淆在一般使用当中应该是非常罕见的，但是要想完全避免这样的问题，必须要对整个响应式
系统的工作原理有一个相当清晰的认知。

21. shallowReactive: 只为某个对象的私有(第一层)属性创建浅层的响应式代理,不会对"属性的属性"做
深层次、递归地响应式代理,而只是保留原样
    const state = shallowReactive({
      foo: 1,
      nested: {
        bar: 2,
      },
    })

    // 变更 state 的自有属性是响应式的
    state.foo++
    // ...但不会深层代理
    isReactive(state.nested) // false
    state.nested.bar++ // 非响应式

22 shallowReadonly: 只为某个对象的自有（第一层）属性创建浅层的只读响应式代理，
同样也不会做深层次、递归地代理，深层次的属性并不是只读的。
    const state = shallowReadonly({
      foo: 1,
      nested: {
        bar: 2,
      },
    })

    // 变更 state 的自有属性会失败
    state.foo++
    // ...但是嵌套的对象是可以变更的
    isReadonly(state.nested) // false
    state.nested.bar++ // 嵌套属性依然可修改

23 shallowRef: 创建一个 ref ，将会追踪它的 .value 更改操作，但是并不会对变更后的 .value 
做响应式代理转换（即变更不会调用 reactive）
    const foo = shallowRef({})
    // 更改对操作会触发响应
    foo.value = {}
    // 但上面新赋的这个对象并不会变为响应式对象
    isReactive(foo.value) // false

24 toRaw: 返回由 reactive 或 readonly 方法转换成响应式代理的普通对象。这是一个还原方法，
可用于临时读取，访问不会被代理/跟踪，写入时也不会触发更改。不建议一直持有原始对象的引用。请谨慎使用。
    const foo = {}
    const reactiveFoo = reactive(foo)

    console.log(toRaw(reactiveFoo) === foo) // true

25. Vue3.0为什么使用Proxy实现双向绑定
  1)Object.defineProperty只能劫持对象的属性，而Proxy是直接代理对象
由于Object.defineProperty只能对属性进行劫持，需要遍历对象的每个属性。而Proxy可以直接代理对象。
  2)Object.defineProperty对新增属性需要手动进行Observe， 由于Object.defineProperty劫持的是对象的属性，所以新增属性时，需要重新遍历对象，对其新增属性再使用Object.defineProperty进行劫持。 也正是因为这个原因，使用 Vue 给data中的数组或对象新增属性时，需要使用vm.$set才能保证新增的属性也是响应式的。
  3)Proxy支持13种拦截操作，这是defineProperty所不具有的。
  4)新标准性能红利
Proxy作为新标准，长远来看，JS引擎会继续优化Proxy，但getter和setter基本不会再有针对性优化。
  5)Proxy兼容性差 目前并没有一个完整支持Proxy所有拦截方法的Polyfill方案